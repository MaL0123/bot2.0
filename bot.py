import telebot
from googleapiclient.discovery import build
from google.oauth2 import service_account
from telebot import types
from api_token import BOT_TOKEN
import time
import configparser
import logging
import json
import threading
import os

config = configparser.ConfigParser()
config.read('config.ini')

SPREADSHEET_ID = config['GoogleSheets']['spreadsheet_id']

ADMIN_ID = 653146205  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
USER_DATA_FILE = 'users.json'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

lock = threading.Lock()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r') as f:
                return json.load(f)
        else:
            logging.info(f"–§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            return {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_data(user_data):
    with lock:
        try:
            with open(USER_DATA_FILE, 'w') as f:
                json.dump(user_data, f, indent=4)
            logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {USER_DATA_FILE}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON-—Ñ–∞–π–ª
def add_user(user):
    user_data = load_user_data()
    user_id = str(user.id)

    if user_id not in user_data:
        user_info = {
            "first_seen": time.time(),
            "username": user.username if user.username else None,
            "first_name": user.first_name if user.first_name else None,
            "last_name": user.last_name if user.last_name else None
        }
        user_data[user_id] = user_info
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        save_user_data(user_data)
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@bot.message_handler(commands=['otvet'])
def broadcast_message(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, send_broadcast_message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def send_broadcast_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    broadcast_text = message.text
    user_data = load_user_data()

    failed_users = []
    for user_id in user_data:
        try:
            bot.send_message(user_id, broadcast_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            failed_users.append(user_id)

    if failed_users:
        bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {failed_users}")
    else:
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    logging.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

@bot.message_handler(commands=['usercount'])
def user_count(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    if message.from_user.id == ADMIN_ID:
        user_data = load_user_data()
        user_count = len(user_data)
        bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {user_count}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['admin'])
def set_spreadsheet_id(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Spreadsheet ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."""
    bot.clear_step_handler_by_chat_id(message.chat.id)  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏
    if message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Spreadsheet ID:")
        bot.register_next_step_handler(msg, save_spreadsheet_id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è Spreadsheet ID.")


def save_spreadsheet_id(message):
    global SPREADSHEET_ID
    SPREADSHEET_ID = message.text.strip()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ config.ini
    config['GoogleSheets']['spreadsheet_id'] = SPREADSHEET_ID
    with open('config.ini', 'w') as configfile:
        config.write(configfile)

    bot.send_message(message.chat.id, f"Spreadsheet ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {SPREADSHEET_ID}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = 'BOT.json'
credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build('sheets', 'v4', credentials=credentials)
sheet = service.spreadsheets()

# –ö–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
role_buttons = ["–°—Ç—É–¥–µ–Ω—Çüßë‚Äçüéì", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—åüë®‚Äçüè´"]
days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
days_for_first_course = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞"]  # –°—É–±–±–æ—Ç–∞ —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞
courses = ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å", "5 –∫—É—Ä—Å"]
para_times = ['8:30-10:05', '10:15-11:50', '12:00-13:35', '14:15-15:50', '16:00-17:35', '17:45-19:20']
saturday_para_times = ['8:30-10:05', '10:15-11:50', '12:00-13:35', '14:15-15:50']  # –í—Ä–µ–º—è –ø–∞—Ä –¥–ª—è —Å—É–±–±–æ—Ç—ã
user_variables = {}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
cache = {
    "data": None,
    "timestamp": 0,
    "cache_duration": 300  # 5 –º–∏–Ω—É—Ç
}

def read_google_sheet(spreadsheet_id, range_name):
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    current_time = time.time()
    if cache["data"] is None or (current_time - cache["timestamp"] > cache["cache_duration"]):
        result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()
        cache["data"] = result.get('values', [])
        cache["timestamp"] = current_time
    return cache["data"]

@bot.message_handler(commands=['start'])
def start(message):
    """–ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏."""
    add_user(message.from_user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*role_buttons)
    msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_role)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
def handle_read(message):
    start(message)

def process_role(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    role = message.text
    if role == '–°—Ç—É–¥–µ–Ω—Çüßë‚Äçüéì':
        select_course(message)
    elif role == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—åüë®‚Äçüè´':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é", "–ù–∞–∑–∞–¥")
        msg = bot.send_message(message.chat.id, "üßê–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é?", reply_markup=markup)
        bot.register_next_step_handler(msg, handle_schedule_choice_teacher)
    else:
        start(message)

def select_course(message):
    """–í—ã–±–æ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*courses)
    msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_course_selection)

def handle_course_selection(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    course = message.text.lower()
    course_mapping = {
        "1 –∫—É—Ä—Å": "I   –∫ —É —Ä —Å",
        "2 –∫—É—Ä—Å": "I I  –∫ —É —Ä —Å",
        "3 –∫—É—Ä—Å": "I I I   –∫ —É —Ä —Å",
        "4 –∫—É—Ä—Å": "I V   –∫ —É —Ä —Å",
        "5 –∫—É—Ä—Å": "V   –∫—É—Ä—Å",
    }

    if course in course_mapping:
        user_variables[chat_id] = {
            "course": course_mapping[course],
        }
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é", "–ù–∞–∑–∞–¥")
        msg = bot.send_message(chat_id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é?", reply_markup=markup)
        bot.register_next_step_handler(msg, handle_schedule_choice_student)
    else:
        select_course(message)

def handle_schedule_choice_student(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é)."""
    choice = message.text.lower()
    chat_id = message.chat.id
    if choice == '–Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å':
        select_day(message)
    elif choice == '–Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é':
        select_group_weekly(message)  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    elif choice == "–ù–∞–∑–∞–¥":
        select_course(message)
    else:
        select_course(message)

# –í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
def select_day(message):
    """–í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    course = user_variables[chat_id].get('course', '')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if course == "I   –∫ —É —Ä —Å":
        markup.add(*days_for_first_course)  # –°–∫—Ä—ã–≤–∞–µ–º —Å—É–±–±–æ—Ç—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞
    else:
        markup.add(*days) # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–±–±–æ—Ç—É

    markup.add("–ù–∞–∑–∞–¥")
    msg = bot.send_message(chat_id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_day_selection)

def handle_day_selection(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è."""
    chat_id = message.chat.id
    selected_day = message.text.lower()

    day_row_mapping = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 3,
        "–≤—Ç–æ—Ä–Ω–∏–∫": 9,
        "—Å—Ä–µ–¥–∞": 15,
        "—á–µ—Ç–≤–µ—Ä–≥": 21,
        "–ø—è—Ç–Ω–∏—Ü–∞": 27,
        "—Å—É–±–±–æ—Ç–∞": 33
    }

    if selected_day in day_row_mapping:
        user_variables[chat_id]['day_row'] = day_row_mapping[selected_day]
        choose_group(message)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Å–Ω–æ–≤–∞.")
        select_day(message)

def find_groups_for_course(course_label):
    """–ü–æ–∏—Å–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø –ø–æ–¥ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π —è—á–µ–π–∫–æ–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞."""
    data = read_google_sheet(SPREADSHEET_ID, '2 –°–µ–º–µ—Å—Ç—Ä!A1:FS40')

    start_col = None
    end_col = None
    groups = []

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞
    for col_num, cell in enumerate(data[1]):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–Ω–¥–µ–∫—Å 1)
        if cell.strip() == course_label:
            start_col = col_num
            # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥—ë–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —è—á–µ–π–∫–∞
            for next_col in range(col_num + 1, len(data[1])):
                if data[1][next_col].strip() != "":
                    end_col = next_col
                    break
            if end_col is None:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–µ–Ω—É–ª–µ–≤—É—é —è—á–µ–π–∫—É –¥–∞–ª—å—à–µ, –∫–æ–Ω–µ—Ü - –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
                end_col = len(data[1])
            break

    if start_col is not None:
        print(f"–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —è—á–µ–π–∫–∞ '{course_label}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ {start_col}, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–∫–µ {end_col - 1}")
        print("–ì—Ä—É–ø–ø—ã –ø–æ–¥ —ç—Ç–æ–π —è—á–µ–π–∫–æ–π:")

        for col_num in range(start_col, end_col):
            if data[2][col_num] and data[2][col_num].strip():  # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
                groups.append((col_num, data[2][col_num]))

        return groups
    else:
        print(f"–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —è—á–µ–π–∫–∞ '{course_label}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return None

def choose_group(message):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞."""
    chat_id = message.chat.id
    course = user_variables[chat_id].get('course', '')

    groups = find_groups_for_course(course)

    if groups:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons_group = [types.InlineKeyboardButton(group_name, callback_data=str(col_num)) for col_num, group_name in groups if group_name.strip().lower() != "‚Ññ –ø–∞—Ä—ã"]
        markup.add(*buttons_group)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        select_course(message)

@bot.callback_query_handler(func=lambda call: True)
def on_group_selected(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    chat_id = call.message.chat.id
    column_number = int(call.data)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
    user_variables[chat_id]['selected_group_col'] = column_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    print(user_variables[chat_id])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
    if 'day_row' in user_variables[chat_id]:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
        send_daily_schedule_student(call.message)
    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
        send_weekly_schedule_student(call.message)

def send_daily_schedule_student(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    data = read_google_sheet(SPREADSHEET_ID, '2 –°–µ–º–µ—Å—Ç—Ä!A1:FS40')
    column_number = user_variables[chat_id]['selected_group_col']
    start_row = user_variables[chat_id].get("day_row", 0)
    group_name = data[2][column_number]

    if column_number is None or start_row == 0:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –∏–ª–∏ –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    para_times_used = para_times if start_row != 33 else saturday_para_times  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å—É–±–±–æ—Ç–∞

    response = f"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*:\n\n"
    for i in range(len(para_times_used)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
        if start_row + i < len(data):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
            row = data[start_row + i + 2]  # –°–º–µ—â–µ–Ω–∏–µ –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            pair_info_raw = row[column_number] if len(row) > column_number else "–û–∫–Ω–æ"
            if not pair_info_raw or pair_info_raw.lower() == "–æ–∫–Ω–æ":
                response += f"*{i + 1} –ø–∞—Ä–∞*\nüéì –ü–∞—Ä–∞: *–û–∫–Ω–æüòã*\n\n"
            else:
                pair_info_lines = pair_info_raw.split('\n')
                pair_info = pair_info_lines[0].strip()
                teacher_info = pair_info_lines[1].strip() if len(pair_info_lines) > 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                cabinet_info = row[column_number + 1] if len(row) > column_number + 1 else "–ö–∞–±–∏–Ω–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                response += f"*{i + 1} –ø–∞—Ä–∞*\n"
                response += f"‚è∞ {para_times_used[i]}\n"
                response += f"üéì –ü–∞—Ä–∞: *{pair_info}*\n"
                response += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{teacher_info}*\n"
                response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: *{cabinet_info}*\n\n"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
    bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=markup)

def select_group_weekly(message):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é."""
    chat_id = message.chat.id
    course = user_variables[chat_id].get('course', '')

    groups = find_groups_for_course(course)

    if groups:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons_group = [types.InlineKeyboardButton(group_name, callback_data=str(col_num)) for col_num, group_name in groups if group_name.strip().lower() != "‚Ññ –ø–∞—Ä—ã"]
        markup.add(*buttons_group)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
    else:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        select_course(message)

@bot.callback_query_handler(func=lambda call: True)
def on_group_selected_weekly(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é."""
    chat_id = call.message.chat.id
    column_number = int(call.data)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
    user_variables[chat_id]['selected_group_col'] = column_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É

    send_weekly_schedule_student(call.message)

def send_weekly_schedule_student(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
    chat_id = message.chat.id
    data = read_google_sheet(SPREADSHEET_ID, '2 –°–µ–º–µ—Å—Ç—Ä!A1:FS40')
    column_number = user_variables[chat_id]['selected_group_col']
    group_name = data[2][column_number]
    course = user_variables[chat_id].get('course', '')

    if column_number is None:
        bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    days_to_process = days_for_first_course if course == "I   –∫ —É —Ä —Å" else days  # –î–ª—è 1 –∫—É—Ä—Å–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Å—É–±–±–æ—Ç—É

    day_row_mapping = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": (3, para_times),
        "–≤—Ç–æ—Ä–Ω–∏–∫": (9, para_times),
        "—Å—Ä–µ–¥–∞": (15, para_times),
        "—á–µ—Ç–≤–µ—Ä–≥": (21, para_times),
        "–ø—è—Ç–Ω–∏—Ü–∞": (27, para_times),
        "—Å—É–±–±–æ—Ç–∞": (33, saturday_para_times)
    }

    for day in days_to_process:
        start_row, para_times_used = day_row_mapping[day]
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*:\n\n"

        for i in range(len(para_times_used)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            if start_row + i < len(data):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
                row = data[start_row + i + 2]  # –°–º–µ—â–µ–Ω–∏–µ –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                pair_info_raw = row[column_number] if len(row) > column_number else "–û–∫–Ω–æ"
                if not pair_info_raw or pair_info_raw.lower() == "–æ–∫–Ω–æ":
                    response += f"*{i + 1} –ø–∞—Ä–∞*\nüéì –ü–∞—Ä–∞: *–û–∫–Ω–æüòã*\n\n"
                else:
                    pair_info_lines = pair_info_raw.split('\n')
                    pair_info = pair_info_lines[0].strip()
                    teacher_info = pair_info_lines[1].strip() if len(pair_info_lines) > 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                    cabinet_info = row[column_number + 1] if len(row) > column_number + 1 else "–ö–∞–±–∏–Ω–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                    response += f"*{i + 1} –ø–∞—Ä–∞*\n"
                    response += f"‚è∞ {para_times_used[i]}\n"
                    response += f"üéì –ü–∞—Ä–∞: *{pair_info}*\n"
                    response += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{teacher_info}*\n"
                    response += f"üèõ –ö–∞–±–∏–Ω–µ—Ç: *{cabinet_info}*\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if response.strip():  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
            bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=markup)


def handle_schedule_choice_teacher(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é)."""
    choice = message.text.lower()
    if choice == '–Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å':
        select_day_for_teacher(message)
    elif choice == '–Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é':
        select_teacher_weekly(message)
    else:
        process_role(message)

def select_day_for_teacher(message):
    """–í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*days)
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)
    bot.register_next_step_handler(msg, handle_day_choice)

def handle_day_choice(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏ –∑–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    day = message.text.lower()
    if day in days:
        start_row, end_row = get_row_range(day)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—èüë®‚Äçüè´:')
        bot.register_next_step_handler(msg, lambda msg: search_teacher_schedule(msg, start_row, end_row))
    else:
        select_day_for_teacher(message)

def get_row_range(day):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    days_range = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': (6, 11),
        '–≤—Ç–æ—Ä–Ω–∏–∫': (12, 17),
        '—Å—Ä–µ–¥–∞': (18, 23),
        '—á–µ—Ç–≤–µ—Ä–≥': (24, 29),
        '–ø—è—Ç–Ω–∏—Ü–∞': (30, 35),
        '—Å—É–±–±–æ—Ç–∞': (36, 40)  # –î–ª—è —Å—É–±–±–æ—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 40-–π —Å—Ç—Ä–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ –º–∞–∫—Å–∏–º—É–º 4 –ø–∞—Ä—ã
    }
    return days_range.get(day, (None, None))

def search_teacher_schedule(message, start_row=None, end_row=None):
    """–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    query = message.text.strip().lower()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ù–∞–∑–∞–¥')

    data = read_google_sheet(SPREADSHEET_ID, '2 –°–µ–º–µ—Å—Ç—Ä!A1:FS40')

    result = []

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞–º
    for i in range(start_row, end_row):
        if i < len(data):
            row = data[i]
            for j, cell in enumerate(row):
                if query in str(cell).lower():
                    group = data[2][j]
                    pair_info_lines = cell.split('\n')
                    pair_info = pair_info_lines[0].strip()
                    teacher_info = pair_info_lines[1].strip() if len(pair_info_lines) > 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                    cabinet_info = row[j + 1] if len(row) > j + 1 else "–ö–∞–±–∏–Ω–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                    time_info = para_times[i - start_row]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø–∞—Ä—ã
                    result.append((pair_info, group, teacher_info, cabinet_info, time_info, f'{i - start_row + 1}'))

                    break

    if result:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å:\n\n"
        for entry in result:
            response += (
                f'*‚ùóÔ∏è---{entry[5]} –ø–∞—Ä–∞---‚ùóÔ∏è*\n'
                f'‚è∞ –í—Ä–µ–º—è: *{entry[4]}*\n'
                f'üë• –ì—Ä—É–ø–ø–∞: *{entry[1]}*\n'
                f'üéì –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã: *{entry[0]}*\n'
                f'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{entry[2]}*\n'
                f'üèõ –ö–∞–±–∏–Ω–µ—Ç: *{entry[3]}*\n\n'
            )
        bot.send_message(message.chat.id, response, parse_mode='Markdown')
        start(message)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.', reply_markup=markup)
        handle_day_choice(message)

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
def select_teacher_weekly(message):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é."""
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—èüë®‚Äçüè´:')
    bot.register_next_step_handler(msg, send_weekly_schedule_teacher)

def send_weekly_schedule_teacher(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = message.chat.id
    query = message.text.strip().lower()
    data = read_google_sheet(SPREADSHEET_ID, '2 –°–µ–º–µ—Å—Ç—Ä!A1:FS40')

    day_row_mapping = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": (6, 11, para_times),
        "–≤—Ç–æ—Ä–Ω–∏–∫": (12, 17, para_times),
        "—Å—Ä–µ–¥–∞": (18, 23, para_times),
        "—á–µ—Ç–≤–µ—Ä–≥": (24, 29, para_times),
        "–ø—è—Ç–Ω–∏—Ü–∞": (30, 35, para_times),
        "—Å—É–±–±–æ—Ç–∞": (36, 40, saturday_para_times)
    }

    for day, (start_row, end_row, para_times_used) in day_row_mapping.items():
        result = []
        for i in range(start_row, end_row):
            if i < len(data):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
                row = data[i]
                for j, cell in enumerate(row):
                    if query in str(cell).lower():
                        group = data[2][j]
                        pair_info_lines = cell.split('\n')
                        pair_info = pair_info_lines[0].strip()
                        teacher_info = pair_info_lines[1].strip() if len(pair_info_lines) > 1 else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                        cabinet_info = row[j + 1] if len(row) > j + 1 else "–ö–∞–±–∏–Ω–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
                        time_info = para_times_used[i - start_row]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä—ã
                        result.append((pair_info, group, teacher_info, cabinet_info, time_info, f'{i - start_row + 1}'))

                        break

        if result:
            response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n\n"
            for entry in result:
                response += (
                    f'*‚ùóÔ∏è---{entry[5]} –ø–∞—Ä–∞---‚ùóÔ∏è*\n'
                    f'‚è∞ –í—Ä–µ–º—è: *{entry[4]}*\n'
                    f'üë•–ì—Ä—É–ø–ø–∞: *{entry[1]}*\n'
                    f'üéì –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã: *{entry[0]}*\n'
                    f'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{entry[2]}*\n'
                    f'üèõ –ö–∞–±–∏–Ω–µ—Ç: *{entry[3]}*\n\n'
                )
            bot.send_message(chat_id, response, parse_mode='Markdown')

    start(message)

while True:
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º